"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1077],{3905:function(e,r,t){t.d(r,{Zo:function(){return l},kt:function(){return f}});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),d=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},l=function(e){var r=d(e.components);return n.createElement(s.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=d(t),f=o,g=u["".concat(s,".").concat(f)]||u[f]||p[f]||a;return t?n.createElement(g,i(i({ref:r},l),{},{components:t})):n.createElement(g,i({ref:r},l))}));function f(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=u;var c={};for(var s in r)hasOwnProperty.call(r,s)&&(c[s]=r[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var d=2;d<a;d++)i[d]=t[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1078:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return l},default:function(){return u}});var n=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],c={id:"ledger",title:"Ledger and Proof queries"},s="Ledger and Proof queries",d={unversionedId:"getting-started/proofs-and-verification/gosdk/ledger",id:"getting-started/proofs-and-verification/gosdk/ledger",isDocsHomePage:!1,title:"Ledger and Proof queries",description:"The Ledger API gives the user access to the data stored in Orion ledger and used to prove data integrity, provides tamper resistance and non-repudiation property.",source:"@site/docs/getting-started/proofs-and-verification/gosdk/ledger.md",sourceDirName:"getting-started/proofs-and-verification/gosdk",slug:"/getting-started/proofs-and-verification/gosdk/ledger",permalink:"/orion-server/docs/getting-started/proofs-and-verification/gosdk/ledger",tags:[],version:"current",frontMatter:{id:"ledger",title:"Ledger and Proof queries"}},l=[],p={toc:l};function u(e){var r=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"ledger-and-proof-queries"},"Ledger and Proof queries"),(0,a.kt)("p",null,"The Ledger API gives the user access to the data stored in Orion ledger and used to prove data integrity, provides tamper resistance and non-repudiation property.\nFor more information about data structures exposed by ledger, see ",(0,a.kt)("a",{parentName:"p",href:"../../../architecture-and-design/block-skip-chain"},"block skip chain"),", ",(0,a.kt)("a",{parentName:"p",href:"../../../architecture-and-design/tx-merkle-tree"},"Transactions merkle tree")," and ",(0,a.kt)("a",{parentName:"p",href:"../../../architecture-and-design/state-merkle-patricia-tree"},"state trie")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"type Ledger interface {\n    // GetBlockHeader returns block header from ledger\n    GetBlockHeader(blockNum uint64) (*types.BlockHeader, error)\n    // GetLedgerPath returns cryptographically verifiable path between any block pairs in ledger skip list\n    GetLedgerPath(startBlock, endBlock uint64) ([]*types.BlockHeader, error)\n    // GetTransactionProof returns intermediate hashes from hash(tx, validating info) to root of\n    // tx merkle tree stored in block header\n    GetTransactionProof(blockNum uint64, txIndex int) (*TxProof, error)\n    // GetTransactionReceipt return block header where tx is stored and tx index inside block\n    GetTransactionReceipt(txId string) (*types.TxReceipt, error)\n    // GetDataProof returns proof of existence of value associated with key in block Merkle-Patricia Trie\n    // Proof itself is a path from node that contains value to root node in MPTrie\n    GetDataProof(blockNum uint64, dbName, key string, isDeleted bool) (*state.Proof, error)\n    // NewBlockHeaderDeliveryService creates a delivery service to deliver block header\n    // from a given starting block number present in the config to all the future block\n    // till the service is stopped\n    NewBlockHeaderDeliveryService(conf *BlockHeaderDeliveryConfig) BlockHeaderDelivererService\n}\n")))}u.isMDXComponent=!0}}]);