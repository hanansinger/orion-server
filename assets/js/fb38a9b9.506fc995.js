"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4307],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return u}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),f=c(r),u=o,g=f["".concat(l,".").concat(u)]||f[u]||d[u]||a;return r?n.createElement(g,i(i({ref:t},p),{},{components:r})):n.createElement(g,i({ref:t},p))}));function u(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},2163:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return f}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],s={id:"proofs",title:"Ledger Data and Cryptographical Proofs"},l=void 0,c={unversionedId:"getting-started/proofs-and-verification/proofs",id:"getting-started/proofs-and-verification/proofs",isDocsHomePage:!1,title:"Ledger Data and Cryptographical Proofs",description:"Ledger Data and Cryptographical Proofs",source:"@site/docs/getting-started/proofs-and-verification/proofs.md",sourceDirName:"getting-started/proofs-and-verification",slug:"/getting-started/proofs-and-verification/proofs",permalink:"/orion-server/docs/getting-started/proofs-and-verification/proofs",tags:[],version:"current",frontMatter:{id:"proofs",title:"Ledger Data and Cryptographical Proofs"},sidebar:"Documentation",previous:{title:"Query a Transaction Receipt",permalink:"/orion-server/docs/getting-started/queries/curl/transaction-receipt"},next:{title:"Proof of Existence of a State/Data",permalink:"/orion-server/docs/getting-started/proofs-and-verification/gosdk/state"}},p=[{value:"Ledger Data and Cryptographical Proofs",id:"ledger-data-and-cryptographical-proofs",children:[{value:"Detailed proofs",id:"detailed-proofs",children:[],level:3}],level:2}],d={toc:p};function f(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"ledger-data-and-cryptographical-proofs"},"Ledger Data and Cryptographical Proofs"),(0,a.kt)("p",null,"Ledger API give user access to ledger data and integrity proofs"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"block header data"),(0,a.kt)("li",{parentName:"ul"},"transaction existence in block proof"),(0,a.kt)("li",{parentName:"ul"},"block(s) existence in ledger proof"),(0,a.kt)("li",{parentName:"ul"},"specific db ",(0,a.kt)("inlineCode",{parentName:"li"},"key->value")," existence at specific (block) time proof"),(0,a.kt)("li",{parentName:"ul"},"receipt for specific tx")),(0,a.kt)("p",null,"There are multiple ways to access ledger data, including proofs. First, there are multiple sdks, including GO, for details see ",(0,a.kt)("a",{parentName:"p",href:"gosdk/ledger"},"here"),"\nand REST API to exposed by server. For details see ",(0,a.kt)("a",{parentName:"p",href:"curl/ledger"},"here")),(0,a.kt)("p",null,"Based on Provenance and Ledger APIs, we can check"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"ledger integrity by accessing block headers and validating consistency of ledger skip list"),(0,a.kt)("li",{parentName:"ul"},"transaction existence proof composed of merkle tree path to transaction in block and block existence proof: ",(0,a.kt)("inlineCode",{parentName:"li"},"GetTransactionProof()")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"GetLedgerPath()")),(0,a.kt)("li",{parentName:"ul"},"block existence proof from TxReceipt or by accessing block headers and validating consistency of ledger skip list"),(0,a.kt)("li",{parentName:"ul"},"proof of active and past states can be done by ",(0,a.kt)("inlineCode",{parentName:"li"},"GetStateProof()")," proving existence of all state changes")),(0,a.kt)("h3",{id:"detailed-proofs"},"Detailed proofs"),(0,a.kt)("p",null,"Block proof contains connected list of blocks from end block to start block"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf"},"message GetLedgerPathResponse {\n  ResponseHeader header = 1;\n  repeated BlockHeader block_headers = 2;\n}\n")),(0,a.kt)("p",null,"Transaction proof contains path in merkle tree in the block to the root."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf"},"message GetTxProofResponse {\n  ResponseHeader header = 1;\n  repeated bytes hashes = 2;\n}\n")),(0,a.kt)("p",null,"State proof contains path in block merkle-patricia trie from leaf (key,value) to the root."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-protobuf"},"message GetDataProofResponse {\n  ResponseHeader header = 1;\n  repeated MPTrieProofElement path = 2;\n}\n\nmessage MPTrieProofElement {\n  repeated bytes hashes = 1;\n}\n")))}f.isMDXComponent=!0}}]);